service: poff-api

provider:
    name: aws
    runtime: nodejs12.x
    stage: prod
    stackName: ${self:provider.stage}-${self:service}
    apiName: ${self:provider.stage}-${self:service}
    region: eu-central-1
    endpointType: regional
    memorySize: 256
    timeout: 21
    logRetentionInDays: 365
    httpApi:
        cors: true
        payload: '2.0'
    logs:
        httpApi: true
    # tracing:
    #     lambda: true

    deploymentBucket:
        name: ${self:provider.stage}-${self:service}
        serverSideEncryption: AES256

    environment:
        GIT_BRANCH: ${git:branch}
        GIT_SHA1: ${git:sha1}

layers:
    commonNodeLibs:
        path: layers
        compatibleRuntimes:
            - nodejs12.x

package:
    individually: true
    exclude:
        - layers/**
        - node_modules/**
        - src/**
        - '*'
    include:
        - src/_helpers.js

plugins:
    - serverless-plugin-git-variables

custom:
    exportGitVariables: false

functions:
    auth-post:
        handler: src/auth/post.handler
        name: ${self:provider.stage}-${self:service}-auth-post
        description: Authenticates user by username and password
        package:
            include:
                - src/auth/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /auth

    auth-eventival-get:
        handler: src/auth/eventival/get.handler
        name: ${self:provider.stage}-${self:service}-auth-eventival-get
        description: Redirects user to auth in Eventival
        package:
            include:
                - src/auth/eventival/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /auth/eventival

    auth-eventival-post:
        handler: src/auth/eventival/post.handler
        name: ${self:provider.stage}-${self:service}-auth-eventival-post
        description: Handles return request from Eventival auth
        package:
            include:
                - src/auth/eventival/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /auth/eventival

    auth-facebook-get:
        handler: src/auth/facebook/get.handler
        name: ${self:provider.stage}-${self:service}-auth-facebook-get
        description: Redirects user to auth in facebook
        package:
            include:
                - src/auth/facebook/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /auth/facebook

    auth-facebook-post:
        handler: src/auth/facebook/post.handler
        name: ${self:provider.stage}-${self:service}-auth-facebook-post
        description: Handles return request from facebook auth
        package:
            include:
                - src/auth/facebook/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /auth/facebook

    auth-google-get:
        handler: src/auth/google/get.handler
        name: ${self:provider.stage}-${self:service}-auth-google-get
        description: Redirects user to auth in Google
        package:
            include:
                - src/auth/google/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /auth/google

    auth-google-post:
        handler: src/auth/google/post.handler
        name: ${self:provider.stage}-${self:service}-auth-google-post
        description: Handles return request from Google auth
        package:
            include:
                - src/auth/google/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /auth/google

    auth-microsoft-get:
        handler: src/auth/microsoft/get.handler
        name: ${self:provider.stage}-${self:service}-auth-microsoft-get
        description: Redirects user to auth in Microsoft
        package:
            include:
                - src/auth/microsoft/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /auth/microsoft

    auth-microsoft-post:
        handler: src/auth/microsoft/post.handler
        name: ${self:provider.stage}-${self:service}-auth-microsoft-post
        description: Handles return request from Microsoft auth
        package:
            include:
                - src/auth/microsoft/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /auth/microsoft

    deploy-post:
        handler: src/deploy/post.handler
        name: ${self:provider.stage}-${self:service}-deploy-post
        description: Handles deploy from preprod to live
        package:
            include:
                - src/deploy/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /deploy

    favourite-get:
        handler: src/favourite/get.handler
        name: ${self:provider.stage}-${self:service}-favourite-get
        description: Returns current user's favourite movies
        package:
            include:
                - src/favourite/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /favourite

    favourite-put:
        handler: src/favourite/put.handler
        name: ${self:provider.stage}-${self:service}-favourite-put
        description: Add movie to current user's favourites
        package:
            include:
                - src/favourite/put.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: PUT /favourite/{movieId}

    favourite-delete:
        handler: src/favourite/delete.handler
        name: ${self:provider.stage}-${self:service}-favourite-delete
        description: Delete movie from current user's favourites
        package:
            include:
                - src/favourite/delete.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: DELETE /favourite/{movieId}

    profile-picture_up-get:
        handler: src/profile/picture_up/get.handler
        name: ${self:provider.stage}-${self:service}-profile-picture_up-get
        description: Returns S3 link to send users profile pic
        package:
            include:
                - src/profile/picture_up/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /profile/picture_up

    profile-picture_down-get:
        handler: src/profile/picture_down/get.handler
        name: ${self:provider.stage}-${self:service}-profile-picture_down-get
        description: Returns current user's profile picture signed url
        package:
            include:
                - src/profile/picture_down/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /profile/picture_down

    product-post:
        handler: src/product/post.handler
        name: ${self:provider.stage}-${self:service}-product-post
        description: Add new product
        package:
            include:
                - src/product/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /product

    product-get:
        handler: src/product/get.handler
        name: ${self:provider.stage}-${self:service}-product-get
        description: Get user products
        package:
            include:
                - src/product/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /product

    buy-get:
        handler: src/buy/get.handler
        name: ${self:provider.stage}-${self:service}-buy-get
        description: Get payment options list
        package:
            include:
                - src/buy/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /buy

    buy-post:
        handler: src/buy/post.handler
        name: ${self:provider.stage}-${self:service}-buy-post
        description: Sell product to person (callback from maksekeskus.ee)
        package:
            include:
                - src/buy/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /buy

    buy-put:
        handler: src/buy/put.handler
        name: ${self:provider.stage}-${self:service}-buy-put
        description: Reserve product to person
        package:
            include:
                - src/buy/put.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: PUT /buy/{categoryId}

    profile-get:
        handler: src/profile/get.handler
        name: ${self:provider.stage}-${self:service}-profile-get
        description: Returns current user's profile
        package:
            include:
                - src/profile/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /profile

    profile-put:
        handler: src/profile/put.handler
        name: ${self:provider.stage}-${self:service}-profile-put
        description: Update current user's profile
        package:
            include:
                - src/profile/put.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: PUT /profile

    profile-post:
        handler: src/profile/post.handler
        name: ${self:provider.stage}-${self:service}-profile-post
        description: Add new user's profile
        package:
            include:
                - src/profile/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /profile

    profile-pswd-post:
        handler: src/profile/pswd/post.handler
        name: ${self:provider.stage}-${self:service}-profile-pswd-post
        description: Sends code to user email.
        package:
            include:
                - src/profile/pswd/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: POST /profile/pswd

    trigger-cognito-merge:
        handler: src/trigger/cognito/merge.handler
        name: ${self:provider.stage}-${self:service}-trigger-cognito-merge
        description: Merges new Cognito user with old (if same email)
        package:
            include:
                - src/trigger/cognito/merge.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}

    trigger-cognito-checkIfUserExists:
        handler: src/trigger/cognito/checkIfUserExists.handler
        name: ${self:provider.stage}-${self:service}-trigger-cognito-checkIfUserExists
        description: Checks if user exists, if not returns info.
        package:
            include:
                - src/trigger/cognito/checkIfUserExists.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}

    version:
        handler: src/version/get.handler
        name: ${self:provider.stage}-${self:service}-version
        description: Returns current code branch name and commit
        package:
            include:
                - src/version/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /
            -
                httpApi: GET /version
