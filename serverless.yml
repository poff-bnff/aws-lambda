service: poff-api

provider:
    name: aws
    runtime: nodejs12.x
    stage: prod
    stackName: ${self:provider.stage}-${self:service}
    apiName: ${self:provider.stage}-${self:service}
    region: eu-central-1
    endpointType: regional
    memorySize: 256
    timeout: 21
    logRetentionInDays: 365
    httpApi:
        cors: true
        payload: '2.0'
    logs:
        httpApi: true
    # tracing:
    #     lambda: true

    deploymentBucket:
        name: ${self:service}
        serverSideEncryption: AES256

    environment:
        GIT_BRANCH: ${git:branch}
        GIT_SHA1: ${git:sha1}

layers:
    commonNodeLibs:
        path: layers
        compatibleRuntimes:
            - nodejs12.x

package:
    individually: true
    exclude:
        - layers/**
        - node_modules/**
        - src/**
        - '*'

plugins:
    - serverless-plugin-git-variables

custom:
    exportGitVariables: false

functions:
    favourite-get:
        handler: src/favourite/get.handler
        name: ${self:provider.stage}-${self:service}-favourite-get
        description: Returns current user's favourite movies
        package:
            include:
                - src/favourite/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /favourite

    favourite-put:
        handler: src/favourite/put.handler
        name: ${self:provider.stage}-${self:service}-favourite-put
        description: Add movie to current user's favourites
        package:
            include:
                - src/favourite/put.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: PUT /favourite/{movieId}

    favourite-delete:
        handler: src/favourite/delete.handler
        name: ${self:provider.stage}-${self:service}-favourite-delete
        description: Delete movie from current user's favourites
        package:
            include:
                - src/favourite/delete.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: DELETE /favourite/{movieId}

    profile-get:
        handler: src/profile/get.handler
        name: ${self:provider.stage}-${self:service}-profile-get
        description: Returns current user's profile
        package:
            include:
                - src/profile/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /profile

    profile-put:
        handler: src/profile/put.handler
        name: ${self:provider.stage}-${self:service}-profile-put
        description: Update current user's profile
        package:
            include:
                - src/profile/put.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: PUT /profile

    version:
        handler: src/version/get.handler
        name: ${self:provider.stage}-${self:service}-version
        description: Returns current code branch name and commit
        package:
            include:
                - src/version/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /
            -
                httpApi: GET /version

    verif:
        handler: src/verif.handler
        name: ${self:provider.stage}-${self:service}-verif
        description:
        package:
            include:
                - src/verif.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /verif

    tkns:
        handler: src/tkns.handler
        name: ${self:provider.stage}-${self:service}-tkns
        description:
        package:
            include:
                - src/tkns.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /tkns

    markQnrAsUnfilled:
        handler: src/markQnrAsUnfilled.handler
        name: ${self:provider.stage}-${self:service}-markQnrAsUnfilled
        description:
        package:
            include:
                - src/markQnrAsUnfilled.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                httpApi: GET /markQnrAsUnfilled
